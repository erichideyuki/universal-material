{"version":3,"sources":["js/src/ripple.ts","js/src/text-field.ts"],"names":["Ripple","element","_this","this","window","getComputedStyle","position","style","isTouching","addEventListener","e","createRipple","clientX","clientY","setTimeout","touches","prototype","rippleContainer","releaseEventName","releaseCallback","pageX","pageY","rippleWrapper","document","createElement","classList","add","ripple","appendChild","insertAdjacentElement","release","contains","removeChild","removeEventListener","requestAnimationFrame","clientRect","getBoundingClientRect","rippleSize","Math","max","clientWidth","clientHeight","width","height","marginLeft","marginTop","transitionDuration","pow","x","left","y","top","transformOrigin","initializeRipples","rippleContainers","querySelectorAll","rippleContainersSelectors","i","length","join","TextField","input","querySelector","remove","setEmpty","value","initializeTextFields","textFields"],"mappings":"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","file":"universal-material.min.js","sourcesContent":["class Ripple {\r\n    static rippleContainersSelectors =\r\n        [\r\n            '.btn',\r\n            '.btn-flat',\r\n            '.btn-borderless',\r\n            '.btn-solid',\r\n            '.btn-raised',\r\n            '.btn-outline',\r\n            '.list-hover .list-item',\r\n            '.list-item .list-item-hover',\r\n            '.tab',\r\n            '.dropdown-item',\r\n            '.radio .selection-control',\r\n            '.checkbox .selection-control',\r\n            '.switch .check-indicator',\r\n            '.chip-remove',\r\n            '.chip-hover'\r\n        ].join(',');\r\n\r\n    constructor(element: HTMLElement) {\r\n        if (window.getComputedStyle(element).position !== \"absolute\" && window.getComputedStyle(element).position !== \"fixed\") {\r\n            element.style.position = \"relative\";\r\n        }\r\n\r\n        let isTouching = false;\r\n\r\n        element.addEventListener('mousedown', (e: MouseEvent) => {\r\n            if (!isTouching) {\r\n                this.createRipple(element, 'mouseup', null, e.clientX, e.clientY);\r\n            }\r\n        });\r\n\r\n        element.addEventListener('touchstart', (e: TouchEvent) => {\r\n            isTouching = true;\r\n            this.createRipple(element, 'touchend', () => {\r\n                setTimeout(() => {\r\n                    isTouching = false;\r\n                }, 100);\r\n            }, e.touches[0].clientX, e.touches[0].clientY);\r\n        });\r\n    }\r\n\r\n    createRipple(rippleContainer, releaseEventName, releaseCallback, pageX, pageY) {\r\n        const rippleWrapper = document.createElement('DIV');\r\n        rippleWrapper.classList.add('ripple-wrapper');\r\n\r\n        const ripple = document.createElement('DIV');\r\n        ripple.classList.add('ripple');\r\n        rippleWrapper.appendChild(ripple);\r\n        rippleContainer.insertAdjacentElement('afterbegin', rippleWrapper);\r\n\r\n        const release = function () {\r\n            ripple.classList.add('dismiss');\r\n\r\n            if (releaseCallback) {\r\n                releaseCallback();\r\n            }\r\n        };\r\n\r\n        window.addEventListener(releaseEventName, release);\r\n        rippleContainer.addEventListener(\"dragover\", release);\r\n\r\n        ripple.addEventListener('transitionend', () => {\r\n            if (ripple.classList.contains('dismiss')) {\r\n                rippleContainer.removeChild(rippleWrapper);\r\n                rippleContainer.removeEventListener(\"dragover\", release);\r\n                window.removeEventListener(releaseEventName, release)\r\n            }\r\n        });\r\n\r\n        requestAnimationFrame(() => {\r\n            const clientRect = rippleContainer.getBoundingClientRect();\r\n            const largestDimensionSize = Math.max(rippleWrapper.clientWidth, rippleWrapper.clientHeight);\r\n            let rippleSize = largestDimensionSize * 2;\r\n            ripple.style.width = rippleSize + 'px';\r\n            ripple.style.height = rippleSize + 'px';\r\n            ripple.style.marginLeft = -rippleSize / 2 + 'px';\r\n            ripple.style.marginTop = -rippleSize / 2 + 'px';\r\n            ripple.style.transitionDuration = (1080 * Math.pow(rippleSize,0.3)) + 'ms, 750ms';\r\n\r\n            const x = (pageX - clientRect.left) + ((rippleSize - rippleContainer.clientWidth) / 2);\r\n            const y = (pageY - clientRect.top) + ((rippleSize - rippleContainer.clientHeight) / 2);\r\n\r\n            ripple.style.transformOrigin = x + \"px \" + y + \"px\";\r\n            ripple.classList.add('show');\r\n        });\r\n    }\r\n\r\n    static initializeRipples(): void {\r\n        const rippleContainers = document.querySelectorAll(Ripple.rippleContainersSelectors);\r\n\r\n        for (let i = 0; i < rippleContainers.length; i++) {\r\n            new Ripple(rippleContainers[i] as HTMLElement);\r\n\r\n        }\r\n    }\r\n}","class TextField {\r\n\r\n    private readonly element: Element;\r\n    private readonly input: HTMLInputElement;\r\n\r\n    constructor(element) {\r\n        const input = element.querySelector('input.text-input')\r\n            || element.querySelector('textarea.text-input')\r\n            || element.querySelector('.text-input input')\r\n            || element.querySelector('.text-input textarea');\r\n\r\n        if (input) {\r\n            input.addEventListener('focus', () => {\r\n                element.classList.add('focus');\r\n            });\r\n\r\n            input.addEventListener('blur', () => {\r\n                element.classList.remove('focus');\r\n            });\r\n\r\n            input.addEventListener('input', () => {\r\n                this.setEmpty();\r\n            });\r\n        }\r\n\r\n        this.input = input;\r\n        this.element = element;\r\n\r\n        this.setEmpty();\r\n    }\r\n\r\n    setEmpty() {\r\n        if (this.input.value) {\r\n            this.element.classList.remove('empty')\r\n        } else {\r\n            this.element.classList.add('empty')\r\n        }\r\n    }\r\n\r\n    static initializeTextFields(): void {\r\n        const textFields = document.querySelectorAll('.text-field');\r\n        for (let i = 0; i < textFields.length; i++) {\r\n            const textField = textFields[i];\r\n            new TextField(textField);\r\n        }\r\n    }\r\n}\r\n"]}